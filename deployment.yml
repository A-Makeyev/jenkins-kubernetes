apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-docker-certs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
        - name: jenkins
          image: jenkins-docker:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2376
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_TLS_VERIFY
              value: "1"
          ports:
            - name: http
              containerPort: 8080
            - name: agent
              containerPort: 50000
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
            - name: jenkins-docker-certs
              mountPath: /certs/client
              readOnly: true

        - name: docker-dind
          image: docker:24-dind
          securityContext:
            privileged: true
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          ports:
            - name: docker
              containerPort: 2376
          volumeMounts:
            - name: jenkins-docker-certs
              mountPath: /certs
            - name: jenkins-data
              mountPath: /var/jenkins_home

      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-data
        - name: jenkins-docker-certs
          persistentVolumeClaim:
            claimName: jenkins-docker-certs
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
spec:
  selector:
    app: jenkins
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30080
    - name: agent
      protocol: TCP
      port: 50000
      targetPort: 50000
      nodePort: 30050
